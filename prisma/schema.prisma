// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username      String?
  email     String   @unique
  emailVerified DateTime?
  image     String?

  password  String?  
  role      String    @default("user")
  address   String?

  cart      CartItem[]
  orders    Order[]

  accounts  Account[]
  wishlist WishlistItem[]

  sessions  Session[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}





model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  sku         String   @unique
  images      String[]
  availability Int
  rating        Float    @default(0)  
  ratingCount   Int      @default(0)
  ratingSum     Int      @default(0)
  reviews     Review[] @relation("ProductReviews")
  category    String
  cartItems   CartItem[]
  wishlist WishlistItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([userId, productId])
}

model Order {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  products    Json
  totalAmount Float
  status      String
  date        DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  user      String
  email     String
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  product   Product  @relation("ProductReviews", fields: [productId], references: [id])
  productId String
}

model WishlistItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId]) 
}
